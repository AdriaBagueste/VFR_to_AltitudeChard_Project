#!/usr/bin/env python3
"""
Exemple d'√∫s del Detector de V√®rtexs d'Espais Aeris

Aquest script mostra com utilitzar el detector per trobar v√®rtexs
de pol√≠gons d'espais aeris en cartes VFR.
"""

from airspace_vertex_detector import AirspaceVertexDetector
import os

def detect_vertices_from_preprocessed_folder(folder_path):
    """
    Detecta v√®rtexs utilitzant una carpeta de preprocessament existent.
    
    Args:
        folder_path (str): Cam√≠ a la carpeta de preprocessament
    """
    print(f"üîç Utilitzant carpeta de preprocessament: {folder_path}")
    
    try:
        # Inicialitzar detector amb carpeta preprocessada
        detector = AirspaceVertexDetector(preprocessed_folder=folder_path)
        
        # Detectar √†rees d'espais aeris
        detector.detect_airspace_areas()
        
        # Extreure v√®rtexs
        detector.extract_polygon_vertices()
        
        # Visualitzar i desar resultats
        detector.visualize_polygons("detected_polygons.png")
        detector.save_vertex_data("airspace_vertices.json")
        detector.export_vertices_csv("airspace_vertices.csv")
        
        # Mostrar estad√≠stiques
        detector.print_statistics()
        
        return detector
        
    except Exception as e:
        print(f"‚ùå Error processant carpeta preprocessada: {e}")
        return None

def detect_vertices_from_image(image_path):
    """
    Detecta v√®rtexs directament des d'una imatge.
    
    Args:
        image_path (str): Cam√≠ a la imatge VFR
    """
    print(f"üîç Processant imatge directament: {image_path}")
    
    try:
        # Inicialitzar detector amb imatge
        detector = AirspaceVertexDetector(image_path=image_path)
        
        # Definir rangs de color personalitzats
        custom_color_ranges = {
            "restricted_airspace": ([0, 50, 50], [10, 255, 255]),      # Vermell
            "controlled_airspace": ([100, 50, 50], [130, 255, 255]),   # Blau
            "uncontrolled_airspace": ([40, 50, 50], [80, 255, 255]),   # Verd
            "danger_areas": ([20, 50, 50], [40, 255, 255]),            # Groc/Taronja
            "prohibited_areas": ([160, 50, 50], [180, 255, 255])       # Magenta
        }
        
        # Detectar √†rees d'espais aeris
        detector.detect_airspace_areas(custom_color_ranges)
        
        # Extreure v√®rtexs amb par√†metres personalitzats
        detector.extract_polygon_vertices(epsilon_factor=0.01, min_vertices=4)
        
        # Visualitzar i desar resultats
        detector.visualize_polygons("detected_polygons_direct.png")
        detector.save_vertex_data("airspace_vertices_direct.json")
        detector.export_vertices_csv("airspace_vertices_direct.csv")
        
        # Mostrar estad√≠stiques
        detector.print_statistics()
        
        return detector
        
    except Exception as e:
        print(f"‚ùå Error processant imatge: {e}")
        return None

def main():
    """Funci√≥ principal per executar l'exemple."""
    print("üõ©Ô∏è  EXEMPLE DE DETECCI√ì DE V√àRTEXS D'ESPAIS AERIS")
    print("=" * 60)
    
    # Buscar carpetes de preprocessament existents
    preprocessing_folders = []
    for item in os.listdir("."):
        if os.path.isdir(item) and item.startswith("preprocessing_steps_"):
            preprocessing_folders.append(item)
    
    # Buscar imatges VFR disponibles
    vfr_images = []
    for img in ["VFR-BORDEAUX.png", "VFR-TOULOUSE.png"]:
        if os.path.exists(img):
            vfr_images.append(img)
    
    print(f"\nüìÅ Carpetes de preprocessament trobades: {len(preprocessing_folders)}")
    for folder in preprocessing_folders:
        print(f"   - {folder}")
    
    print(f"\nüñºÔ∏è  Imatges VFR disponibles: {len(vfr_images)}")
    for img in vfr_images:
        print(f"   - {img}")
    
    # Opci√≥ 1: Utilitzar carpeta de preprocessament si existeix
    if preprocessing_folders:
        print(f"\nüîß Opci√≥ 1: Utilitzant carpeta de preprocessament m√©s recent...")
        latest_folder = sorted(preprocessing_folders)[-1]
        detector = detect_vertices_from_preprocessed_folder(latest_folder)
        
        if detector:
            print("‚úÖ Detecci√≥ completada utilitzant dades preprocessades!")
    
    # Opci√≥ 2: Processar imatge directament
    if vfr_images:
        print(f"\nüîß Opci√≥ 2: Processant imatge directament...")
        detector = detect_vertices_from_image(vfr_images[0])
        
        if detector:
            print("‚úÖ Detecci√≥ completada processant imatge directament!")
    
    if not preprocessing_folders and not vfr_images:
        print("\n‚ö†Ô∏è  No s'han trobat carpetes de preprocessament ni imatges VFR.")
        print("   Assegura't que tens:")
        print("   - Una imatge VFR (VFR-BORDEAUX.png o VFR-TOULOUSE.png)")
        print("   - O una carpeta de preprocessament (preprocessing_steps_*)")
    
    print("\nüìã ARXIUS GENERATS:")
    print("   - detected_polygons.png: Visualitzaci√≥ dels pol√≠gons detectats")
    print("   - airspace_vertices.json: Dades dels v√®rtexs en format JSON")
    print("   - airspace_vertices.csv: Coordenades dels v√®rtexs en format CSV")

if __name__ == "__main__":
    main()
